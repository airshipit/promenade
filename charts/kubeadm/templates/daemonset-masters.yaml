{{/*
Copyright 2017 AT&T Intellectual Property.  All other rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- if .Values.manifests.daemonset_masters }}
{{- $envAll := . }}
{{- $mounts_kubernetes_apiserver := .Values.pod.mounts.kubernetes_apiserver.kubernetes_apiserver }}
{{- $mounts_kubernetes_apiserver_init := .Values.pod.mounts.kubernetes_apiserver.init_container }}
{{- $labels := tuple $envAll "kubernetes" "kubernetes-kubeadm-anchor" | include "helm-toolkit.snippets.kubernetes_metadata_labels" -}}

---
apiVersion: "apps/v1"
kind: DaemonSet
metadata:
  name: {{ .Values.service.name }}-masters-anchor
  labels:
{{ $labels | indent 4 }}
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
spec:
  selector:
    matchLabels:
{{ $labels | indent 6 }}
{{ tuple $envAll "kubernetes-apiserver-anchor" | include "helm-toolkit.snippets.kubernetes_upgrades_daemonset" | indent 2 }}
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
      annotations:
        {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
        configmap-kubeconfig-hash: {{ tuple "configmap-kubeconfig.yaml" . | include "helm-toolkit.utils.hash" }}
{{ dict "envAll" $envAll "podName" "kubernetes_apiserver_anchor" "containerNames" (list "anchor") | include "helm-toolkit.snippets.kubernetes_mandatory_access_control_annotation" | indent 8 }}
    spec:
{{ dict "envAll" $envAll "application" "kubernetes_apiserver_anchor" | include "helm-toolkit.snippets.kubernetes_pod_security_context" | indent 6 }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: {{ .Values.labels.common.node_selector_key }}
                    operator: In
                    values:
                      - {{ .Values.labels.common.node_selector_value }}
                  - key: {{ .Values.labels.masters.node_selector_key }}
                    operator: In
                    values:
                      - {{ .Values.labels.masters.node_selector_value }}
      dnsPolicy: {{ .Values.anchor.dns_policy }}
      serviceAccountName: kubeadm
      hostNetwork: true
      priorityClassName: system-node-critical
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: CriticalAddonsOnly
          operator: Exists
      terminationGracePeriodSeconds: {{ .Values.pod.lifecycle.termination_grace_period.kubernetes_apiserver.timeout }}
      containers:
        - name: anchor
          image: {{ .Values.images.tags.anchor }}
          imagePullPolicy: {{ .Values.images.pull_policy }}
{{ tuple $envAll $envAll.Values.pod.resources.anchor_pod | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
{{ dict "envAll" $envAll "application" "kubernetes_apiserver_anchor" "container" "anchor" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: NODE_ROLE
            value: "master"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          command: ["/bin/bash","-c"]
          args: ["/tmp/bin/anchor"]
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/bin/pre_stop

          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - |-
                cat /tmp/done
#                [ "$(curl -s -S -o /dev/null \
#                    --cert "/host{{ .Values.apiserver.host_etc_path }}/pki/apiserver.pem" \
#                    --key "/host{{ .Values.apiserver.host_etc_path }}/pki/apiserver-key.pem" \
#                    --cacert "/host{{ .Values.apiserver.host_etc_path }}/pki/cluster-ca.pem" \
#                    "https://localhost:{{ .Values.network.kubernetes_apiserver.port }}/healthz" \
#                    -w "%{http_code}")" = "200" ]
#                exit $?
#            initialDelaySeconds: 10
#            periodSeconds: 5
#            timeoutSeconds: 5

          volumeMounts:
            - name: host
              mountPath: {{ .Values.host_dir }}
              mountPropagation: HostToContainer
            - name: {{ .Values.service.name }}-certs
              mountPath: /tmp/certs
            - name: {{ .Values.service.name }}-patches
              mountPath: /tmp/patches
            - name: {{ .Values.service.name }}-bin
              mountPath: /tmp/bin
            - name: {{ .Values.service.name }}-kubeconfig
              mountPath: /tmp/kubeconfig
            - name: {{ .Values.service.name }}-apiserver-misc
              mountPath: /tmp/apiserver-misc
            - name: kubelet-config
              mountPath: /tmp/kubelet
            - name: kubeadm-config
              mountPath: /tmp/kubeadm
            - name: pod-tmp
              mountPath: /tmp
{{ if $mounts_kubernetes_apiserver.volumeMounts }}{{ toYaml $mounts_kubernetes_apiserver.volumeMounts | indent 12 }}{{ end }}
      volumes:
        - name: {{ .Values.service.name }}-bin
          configMap:
            name: {{ .Values.service.name }}-bin
            defaultMode: 0555
        - name: {{ .Values.service.name }}-apiserver-misc
          configMap:
            name: {{ .Values.service.name }}-apiserver-misc
            defaultMode: 0555
        - name: {{ .Values.service.name }}-certs
          configMap:
            name: {{ .Values.service.name }}-certs
            defaultMode: 0444
        - name: {{ .Values.service.name }}-patches
          configMap:
            name: {{ .Values.service.name }}-patches
            defaultMode: 0444
        - name: host
          hostPath:
            path: /
        - name: {{ .Values.service.name }}-kubeconfig
          configMap:
            name: {{ .Values.service.name }}-kubeconfig
            defaultMode: 0444
        - name: kubelet-config
          configMap:
            name: kubelet-config
            defaultMode: 0444
        - name: kubeadm-config
          configMap:
            name: kubeadm-config
            defaultMode: 0444
        - name: pod-tmp
          emptyDir: {}
{{ if $mounts_kubernetes_apiserver.volumes }}{{ toYaml $mounts_kubernetes_apiserver.volumes | indent 8 }}{{ end }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
{{- end }}
